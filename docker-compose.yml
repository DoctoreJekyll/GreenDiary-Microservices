services:
  # Bases de datos para cada microservicio
  plant-db:
    image: postgres:15
    container_name: plant-db
    environment:
      POSTGRES_DB: plantdb
      POSTGRES_USER: plantuser
      POSTGRES_PASSWORD: plantpass
    ports:
      - "5433:5432"
    networks:
      - plantnet

  watering-db:
    image: postgres:15
    container_name: watering-db
    environment:
      POSTGRES_DB: wateringdb
      POSTGRES_USER: wateringuser
      POSTGRES_PASSWORD: wateringpass
    ports:
      - "5434:5432"
    networks:
      - plantnet

  auth-db:
    image: postgres:15
    container_name: auth-db
    environment:
      POSTGRES_DB: authdb
      POSTGRES_USER: authuser
      POSTGRES_PASSWORD: authpass
    ports:
      - "5435:5432"
    networks:
      - plantnet

  # Infraestructura de Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - plantnet

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # Definimos ambos listeners
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      # Los anunciamos igual
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - plantnet


  # Servicio de descubrimiento (Eureka)
  eureka:
    build:
      context: .
      dockerfile: ./discovery-service/Dockerfile
    container_name: discovery
    ports:
      - "8761:8761"
    networks:
      - plantnet

  # API Gateway
  gateway:
    build:
      context: .
      dockerfile: ./gateway-service/Dockerfile
    container_name: gateway
    depends_on:
      - eureka
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka:8761/eureka
    ports:
      - "8080:8080"
    networks:
      - plantnet

  # Microservicio de plantas
  plant-service:
    build:
      context: .
      dockerfile: ./plant-service/Dockerfile
    container_name: plant-service
    depends_on:
      - plant-db
      - kafka
      - eureka
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://plant-db:5432/plantdb
      SPRING_DATASOURCE_USERNAME: plantuser
      SPRING_DATASOURCE_PASSWORD: plantpass
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka:8761/eureka
    ports:
      - "8081:8081"
    networks:
      - plantnet

  # Microservicio de riego
  watering-service:
    build:
      context: .
      dockerfile: ./watering-service/Dockerfile
    container_name: watering-service
    depends_on:
      - watering-db
      - kafka
      - eureka
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://watering-db:5432/wateringdb
      SPRING_DATASOURCE_USERNAME: wateringuser
      SPRING_DATASOURCE_PASSWORD: wateringpass
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka:8761/eureka
    ports:
      - "8082:8082"
    networks:
      - plantnet

  # Microservicio de autenticaci√≥n
  auth-service:
    build:
      context: .
      dockerfile: ./auth-service/Dockerfile
    container_name: auth-service
    depends_on:
      - auth-db
      - kafka
      - eureka
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://auth-db:5432/authdb
      SPRING_DATASOURCE_USERNAME: authuser
      SPRING_DATASOURCE_PASSWORD: authpass
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka:8761/eureka
    ports:
      - "8083:8083"
    networks:
      - plantnet

networks:
  plantnet:
    driver: bridge
